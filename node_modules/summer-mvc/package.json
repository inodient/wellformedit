{
  "_args": [
    [
      {
        "raw": "summer-mvc-1.1.1.tgz",
        "scope": null,
        "escapedName": "summer-mvc-1.1.1.tgz",
        "name": null,
        "rawSpec": "summer-mvc-1.1.1.tgz",
        "spec": "/Users/changhokang/git/Nodejs/wellformedit_ui/summer-mvc-1.1.1.tgz",
        "type": "local"
      },
      "/Users/changhokang/git/Nodejs/wellformedit_ui"
    ]
  ],
  "_from": "summer-mvc-1.1.1.tgz",
  "_id": "summer-mvc@1.1.1",
  "_inCache": true,
  "_location": "/summer-mvc",
  "_phantomChildren": {},
  "_requested": {
    "raw": "summer-mvc-1.1.1.tgz",
    "scope": null,
    "escapedName": "summer-mvc-1.1.1.tgz",
    "name": null,
    "rawSpec": "summer-mvc-1.1.1.tgz",
    "spec": "/Users/changhokang/git/Nodejs/wellformedit_ui/summer-mvc-1.1.1.tgz",
    "type": "local"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "file:summer-mvc-1.1.1.tgz",
  "_shasum": "bfe741778131d93ca8375becd7566b6b235f3376",
  "_shrinkwrap": null,
  "_spec": "summer-mvc-1.1.1.tgz",
  "_where": "/Users/changhokang/git/Nodejs/wellformedit_ui",
  "author": {
    "name": "inodient"
  },
  "bugs": {
    "url": "https://github.com/inodient/summer-mvc/issues"
  },
  "dependencies": {
    "bluebird": "^3.5.0",
    "body-parser": "^1.17.1",
    "busboy": "^0.2.14",
    "cookie-parser": "^1.4.3",
    "ejs": "^2.5.6",
    "express": "^4.15.2",
    "express-session": "^1.15.2",
    "mssql": "^4.0.2"
  },
  "description": "Structured, Light, Spring-like Web Application Development Framework",
  "devDependencies": {},
  "homepage": "https://github.com/inodient/summer-mvc#readme",
  "keywords": [
    "summer-mvc",
    "mvc",
    "web",
    "web application",
    "http",
    "server",
    "was",
    "spring",
    "cookie",
    "session",
    "ejs",
    "express"
  ],
  "license": "ISC",
  "main": "index.js",
  "name": "summer-mvc",
  "optionalDependencies": {},
  "readme": "# summer-mvc\nStructured, light, spring-like web application development framework.      \n\n## Installation      \n```      \n$ npm install summer-mvc      \n```      \n\n## Quick Start\nIn your js file, require module `summer-mvc`. Then `summer-mvc` build architecture, authomatically.     \n( dispatcher, controller, views, queries etc )     \n```javascript     \nconst mvc = require( \"summer-mvc\" );    \n```    \n\nAfter building, call `basic http request` in your browser.\nDefault port is 3000. ex) http://localhost:3000    \n```\nhttp://{your-host-name}:{port}    \n```    \n\n## Features       \n- Focus on fast design & development speed\n- Use `express` for serving http request, response\n- Provide automatic *application-building-machanism*\n- Provide structural designing method using **JSON** file format\n- Simular architecture with spring framework\n- Support 1 view engine (`ejs`), 1 database engine (`mysql`) (v1.1.0)\n- Provide easy way to manage cookie, session and database(mysql) \n\n## Philosophy    \nThe `summer-mvc` has only one goal to provide very simple way to design web application. As most developer feel comfortable for using the **spring framework**, the `summer-mvc` provides spring framework - like environment. `summer-mvc` uses small **dispatcher-engine** (like spring's dispatcher-servlet), and it can be controlled by **JSON files**(like spring's xxx-servlet.xml).      \n\n## DOCs    \n`summer-mvc`'s [DOC.pdf](https://github.com/inodient/summer-mvc/blob/master/DOC.pdf)    \n    \n## Manual    \n### Design & Implement\n1. Set initial information : **properties/initalizer.json**    \n   * port : service port ( default : 3000 )    \n   * context_architecture : architecture of web application    \n   * views / options : defaults view engine and options. (**Please don't change**)    \n   * statis_folders : defaults express static folders ( *__app.use( express.static( *** ) );__* )    \n\n\n2. Set initial dispatcher : **dispatcher/context-dispatcher.json**    \n   * \"GET\", \"POST\" : method of http request\n   * Array of dispatching info\n      * id : identifier ( doesn't use for system but fill in )\n      * path : URI's resource paths\n      * controllerJS : indicate controller js file (../controller)\n      * controlFunction : name of control function in controllerJS file\n      * view : indicate ejs view file (../views)\n\n\n3. Implement Controller : **controller/controller_xxx.js**    \n   * The only one rule is that controller must return object named **model** using callback function.    \n   * `summer-mvc` call controller function automatically, but contol function has 3 mandatory parameters.    \n      * req : request object comes from client    \n      * res : response object send to client (managed by `your application`)\n      * callback : **1st param - err, 2nd param - model object**\n   * Sample\n      ```javascript\n      exports.control = function( req, res, callback ){\n        var model = {};\n        callback( null, model );\n      }\n      ```    \n\n\n\n4. Design view : **views/xxx.ejs**    \n   * `summer-mvc`'s default view engine is [*`ejs`*](https://www.npmjs.com/package/ejs)\n   * If controller return model object using callback, `summer-mvc` send it to *ejs*.\n      So ejs viewing file can use model object's elements.\n   * Sample\n     ```html\n     <tr>\n        <td>Method</td>\n        <td><%= method %></td>\n     </tr>\n     ```\n\n### Architecture    \nConsists of 5 parts : **dispatcher, properties, controller, views, queries**    \n\n| Name | Type | Usage |\n|:----|:----:|:----|\n|  ✚ dispatcher | folder | containing dispatcher json files |    \n|  context_dispatcher.json | file | containing http req/res paths and assign controller & views |    \n|  ✚ properties | folder | containing defaults setting json files (initializer.json, db.json) |    \n|  initializer.json | file | containing default web application configuration (port, static_folder etc) |    \n|  db.json | file | containing db connection informations (host, user, password etc) |    \n|  ✚ controller | folder | containing controller js files |    \n| ✚ views | folder | containing ejs view files |    \n|  ✚ queries | folder | containing query json files |       \n\n\n\nAfter initializing, **controller**, **views** and **queries** folder has sample files.    \n\n| Parent | Name | Type | Usage |\n|:----|:----|:----:|:----|\n| controller | controller_basic.js | file |  sample basic controller |    \n| controller | controller_ajax.js | file |  sample ajax controller |    \n| controller | controller_cookie_session.js | file |  sample cookie, session controller |    \n| controller | controller_db.js | file |  sample db controller |    \n| controller | controller_post.js | file |  sample post controller |    \n| views | index.ejs |file| sample index ejs page |    \n| views | error.html |file| sample error html page |    \n| queries | query.json  | file | sample query information file |\n\n\n### APIs\n`summer-mvc` provides some APIs for web application especailly **cookie, session** and **db**.\n( samples : controller_cookie_session.js / controller_db.js )    \n#### setCookie( cookieKey, cookieValue )    \n```javascript    \nlet connection = new connectionHandler( req, res );    \nconnection.setCookie( \"cookie_Key\", \"cookie_Value\" );    \n```\n#### getCookie( cookieKey )    \n```javascript    \nlet connection = new connectionHandler( req, res );    \nconnection.getCookie( \"cookie_Key\" );    \n```\n#### clearCookie( cookieKey )    \n```javascript    \nlet connection = new connectionHandler( req, res );    \nconnection.clearCookie( \"cookie_Key\" );    \n```\n#### setSession( sessionKey, sessionValue )    \n```javascript    \nlet connection = new connectionHandler( req, res );    \nconnection.setSession( \"session_Key\", \"session_Value\" );    \n```\n#### getSession( sessionKey )\n```javascript    \nlet connection = new connectionHandler( req, res );    \nconnection.getSession( \"session_Key\" );    \n```\n#### destroySession()\n```javascript    \nlet connection = new connectionHandler( req, res );    \nconnection.destroySession();    \n```\n#### executeQuery( queryId[, params, ...], callback ) : **mysql only**\n> queryId : identifier of query ( queries/query.json's id )    \n> params : prepared statement's empty values\n> callback : contains 3 parameters - err, results(rs), fields(columns)\n```javascript\nlet db = new dbHandler();\ndb.executeQuery( \"getMySqlVersion\", function( err, results, fields ){\n    console.log( results );\n}\n```    \n#### getQueryString( queryId[, params] ) : **mysql only**\n> queryId : identifier of query ( queries/query.json's id )     \n> params : prepared statement's empty values    \n```javascript\nlet db = new dbHandler();\ndb.executeQuery( \"getMySqlVersion\" )\n```    \n\n## History\nv 1.0.0 Initial version    \nv 1.0.1 Bug fixed    \nv 1.0.2 Bug fixed    \n**v 1.1.0 Current Version**    \n\n## People\nThe original author of summer-mvc is Changho Kang.(inodient@gmail.com)  \n\n## License\n[MIT Licensed](https://github.com/inodient/summer-mvc/blob/master/LICENSE)  \n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/inodient/summer-mvc.git"
  },
  "scripts": {},
  "version": "1.1.1"
}
