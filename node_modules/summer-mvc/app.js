const express = require( "express" );
const app = express();





// Init global module's paths;
global.dbHandler = require( "./common/dbHandler.js" ).dbHandler;
global.connectionHandler = require( "./common/connection.js" ).connection;
global.fileHandler = require( "./common/fileHandler.js" ).fileHandler;
global.Promise = require( "bluebird" );
global.Busboy = require( "busboy" );
global.path = require( "path" );
global.fs = require( "fs" );
global.mime = require( "mime" );

global.mysql = require( "mysql" );
global.pool = mysql.createPool( require(require("path").join(process.cwd(), "properties", "db.json") ) );




// Init cookie, session
const cookieParser = require( "cookie-parser" );
app.use( cookieParser() );

const session = require( "express-session" );
app.use( session({
  secret : "aslknq;oiwne;ofuiba;osudbf;uoasdf",
  resave : false,
  saveUninitialized : true,
  cookie : {
    maxAge: 1000 * 60 * 60
  }
}) );





// Init body Parser
const bodyParser = require( "body-parser" );
app.use( bodyParser.urlencoded({ extended : true }) );




// Init summer-mvc structure
const initializer = require( "./common/initializer" );
initializer.initStructure();




// set View Engine : specific for ejs
const viewEngine = initializer.getViewEngine();

app.set( "view engine", viewEngine );
app.engine( "html", require(viewEngine).renderFile );
app.set( "views", "views" );




// set static Folders
const staticFolders = initializer.getStaticFolders();

for( var i=0; i<staticFolders.length; i++ ){
  app.use( express.static(staticFolders[i]) );
}




// set context Dispatcher
const contextDispatcher = require( initializer.getContextDispatcherPath() );
//const controllerDispatcher = ( initializer.getControllerDispatcherPath() === undefined ) ? undefined : require( initializer.getControllerDispatcherPath() );




// Start WAS
const port = initializer.getPort();
app.set('port', (process.env.PORT || port)); // 5000 was my original port

app.listen( app.get('port'), () => {
  console.log( "Listen Port : " + app.get('port') );
} );





const Promise = require( "bluebird" );

app.get( "/*", (req, res) => {

  console.log( req.headers["accept-language"] );
  console.log( req.path );

  // 1. Direct
  // 1-1. image ==> initializer default Image
  // const defaultExtraction = initializer.getDefaultExtraction();
  //
  // for( var i=0; i<defaultExtraction.length; i++ ){
  //   if( req.path.indexOf( "." + defaultExtraction[i] ) > -1 ){
  //     let fs = require( "fs" );
  //     let fileBinary = fs.readFileSync( require("path").join( process.cwd(), req.path.replace( "/", "" )) );
  //
  //     res.writeHead( 200, {"Content-Type" : "image/" + defaultExtraction[i]} );
  //     res.send( fileBinary, "binary" );
  //   }
  // }

  // 2. Dispatcher
  contextDispatcher.dispatching( req, res )
  .then( function( mav ){
    // 2-1. Ajax
    if( req.xhr || req.headers.accept.indexOf("json") > -1 ){
      res.send( mav.model );
    }
    // 2-2. With View
    else{
      let contentDisposition = res._headers[ "content-disposition" ];

      // 2-2-1. Render View
      if( !contentDisposition ){
        res.render( mav.view, mav.model );
      }
      // 2-2-2. File Download
      else{
        res.download( require("path").join(mav.model.savedPath, mav.model.savedFileName), mav.model.originalFileName );
      }

    }
  } )
  .catch( function(err){
    console.log( err );
    res.render( "error.html" );
  } );

  // if( req.path.indexOf(".png") > -1 || req.path.indexOf(".gif") > -1 || req.path.indexOf(".ppt") > -1 || req.path.indexOf(".ico") > -1 ){
  //   let fs = require( "fs" );
  //   var img = fs.readFileSync( require("path").join( process.cwd(), req.path.replace("/","") ) );
  //   res.writeHead(200, {'Content-Type': 'image/png' });
  //   res.end(img, 'binary');
  // } else{
  //   contextDispatcher.dispatching( req, res )
  //   .then( function( mav ){
  //     console.log( "view  : " + mav.view );
  //     console.log( "model : " + JSON.stringify(mav.model, null, 4) );
  //
  //     let content_disposition = res._headers[ "content-disposition" ];
  //
  //     console.log( "content_disposition", content_disposition );
  //
  //     if( content_disposition  ){
  //       res.download( require("path").join(mav.model.savedPath, mav.model.savedFileName), mav.model.originalFileName );
  //       // res.download( require("path").join( process.cwd(), "upload", "/22571.png" ), "22571.png" );
  //     } else{
  //       if( req.xhr || req.headers.accept.indexOf("json") > -1 ){
  //         res.send( mav.model );
  //       } else{
  //         res.render( mav.view, mav.model );
  //       }
  //     }
  //   } )
  //   .catch( function(err){
  //     console.log( err );
  //     res.render( "error.html" );
  //   } );
  // }
} );


app.post( "/*", (req, res) => {

  console.log( req.headers["accept-language"] );
  console.log( req.path );

  // 1. Direct
  // 1-1. image ==> initializer default Image
  // const defaultExtraction = initializer.getDefaultExtraction();
  //
  // for( var i=0; i<defaultExtraction.length; i++ ){
  //   if( req.path.indexOf( "." + defaultExtraction[i] ) > -1 ){
  //     let fs = require( "fs" );
  //     let fileBinary = fs.readFileSync( require("path").join( process.cwd(), req.path.replace( "/", "" )) );
  //
  //     res.writeHead( 200, {"Content-Type" : "image/" + defaultExtraction[i]} );
  //     res.send( fileBinary, "binary" );
  //   }
  // }

  // 2. Dispatcher
  contextDispatcher.dispatching( req, res )
  .then( function( mav ){
    // 2-1. Ajax
    if( req.xhr || req.headers.accept.indexOf("json") > -1 ){
      res.send( mav.model );
    }
    // 2-2. With View
    else{
      let contentDisposition = res._headers[ "content-disposition" ];

      // 2-2-1. Render View
      if( !contentDisposition ){
        res.render( mav.view, mav.model );
      }
      // 2-2-2. File Download
      else{
        res.download( require("path").join(mav.model.savedPath, mav.model.savedFileName), mav.model.originalFileName );
      }

    }
  } )
  .catch( function(err){
    console.log( err );
    res.render( "error.html" );
  } );

  // contextDispatcher.dispatching( req, res )
  // .then( function( mav ){
  //   console.log( "view  : " + mav.view );
  //   console.log( "model : " + JSON.stringify(mav.model, null, 4) );
  //
  //   let content_disposition = res._headers[ "content-disposition" ];
  //
  //   if( content_disposition && content_disposition.indexOf( "filename" ) > -1 ){
  //     res.download( require("path").join(mav.model.savedPath, mav.model.savedFileName), mav.model.originalFileName );
  //   } else{
  //     if( req.xhr || req.headers.accept.indexOf("json") > -1 ){
  //       res.send( mav.model );
  //     } else{
  //       res.render( mav.view, mav.model );
  //     }
  //   }
  // } )
  // .catch( function(err){
  //   console.log( err );
  //   res.render( "error.html" );
  // } );
} );
